字节流的两个顶层父类：
1，InputStream	2，OutputStream

字符流的两个顶层父类
1，Reader	2，Writer

这些体系的子类都以父类名作为后缀，而且子类名的前缀就是该对象的功能。

就从熟悉的文字来开始字符流

//	需求：将一些文字存储到硬盘的一个文件中
记住：如果要操作文字数据，建议优先考虑字符流。
而且要将数据从内存写到硬盘上，要使用字符流中的输出流Writer。
硬盘的数据基本体现是文件，希望找到一个可以操作文件的Writer。

找到FileWriter


--------------------------------------------------------------------------------------------------------------------

字符流缓冲区：
BufferedWriter：
	newLine()
	
BufferedReader：
	newLine()
	

	
装饰设计模式：
	对一组对象的功能进行增强时，就可以使用该模式进行问题的解决。
	
装饰和继承都能实现一样的特点：进行功能的扩展增强，有什么区别呢？
	首先有一个集成体系
	Writer
		|--TextWritter：用于操作文本
			|--BufferTextWriter：加入了缓冲技术的操作文本的对象。
		|--MediaWritter：用于操作媒体
			|--BufferMediaWriter：加入了缓冲技术的操作文本的对象。
	想要对操作的动作进行效率的提高。
	按照面向对象，可以通过继承对具体对象进行功能扩展。
	效率提高需要加入缓冲技术。
	
	如果这个体系需要进行功能扩展，又多了流对象。
	那么这个流要提高效率，是不是又要产生子类呢？是，这时就会发现只为提高功能，进行的继承，导致继承体系越来越臃肿，不够灵活。
	
	重新思考这个问题？
	既然加入的都是同一种技术：缓冲，
	继承让缓冲和具体的对象相结合。
	可不可以将缓冲进行单独的封装，那个对象需要缓冲就将哪个对象和缓冲关联。
	
	class BufferWriter extends Writer{
		BufferWriter(Writer w) {
		
		}	
	}
	
	Writer
		|--TextWriter：用于操作
		|--MediaWriter：用于操作媒体
		|--BufferWriter：用于提高效率
	装饰比继承更灵活。
	特点：装饰类和被装饰类都必须所属同一个接口或者父类。
	
	
	
---------------------------------------------------------------------------------------------------------------------

字节流：
	InputStream
	OutputStream

字节流：
	FileInputStream
	FileOutputStream
	BufferedInputStream
	BufferedOutputStream
	
字符流：
	Writer
	Reader
	FileReader
	FileWriter
	BufferedReader
	BufferedWriter
	


---------------------------------------------------------------------------------------------------------------------

转换流：
	InputStreamReader：字节到字符的桥梁。解码
	OutputStreamReader：字符到字节的桥梁。编码
	
流的 操作规律：
	1，之所以要弄清这个规律，是因为流对象太多，开发时不知道用哪个对象合适。
	2，想要知道开发时用到哪些对象，只要通过四个明确即可。
		1) 明确源和目的（汇）
			源：InputStream Reader
			目的：OutputStream Writer
		2) 明确数据是否是纯文本数据
			源如果是纯文本：Reader，
				否则：InputStream
			目的：是纯文本Writer，
				否则：OutputStream
		3) 明确具体的设备
			源设备：
				硬盘：File
				键盘：System.in
				内存：数组
				网络：Socket流
			
			目的设备：
				硬盘：File
				控制台：System.out
				内存：数组
				网络：Socket流
			
		4) 是否需要其他额外功能
			1，是否需要高效（缓冲区）
				是：加上buffer
				
				
需求1：复制一个文本文件

	1，明确源和目的。
		源：InputStream Reader
		目的：OutputStream Writer
	2，是否是纯文本
		是！
		源：Reader
		目的：Writer
	3，明确具体设备
		源：
			硬盘：file
		目的：
			硬盘：File
			
		FileReader fr = new FileReader("a.txt")
		FileWriter fw = new FileWriter("b.txt")
	4，需要额外功能吗？
		需要，需要高效
		BufferedReader bufr = new BufferedReader(new FileReader("a.txt"))
		bufferedWriter bugw = new BufferedWriter(new FileWriter("b.txt"))

需求2：

需求3：

需求4：



-----------------------------------------------------------------------------------------------------------------------

需求5：将一个中文字符串数据按照指定的编码表写入到一个文本文件中